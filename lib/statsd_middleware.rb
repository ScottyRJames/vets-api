# frozen_string_literal: true

class StatsdMiddleware
  STATUS_KEY   = 'api.rack.request'
  DURATION_KEY = 'api.rack.request.duration'

  # Mapping of app root URLs to app ids. Generated by running the following command in vets-website.
  # find src/ -name 'manifest.js*' | xargs cat | jq -r 'if .rootUrl == null then "" else "\"\(.rootUrl)\" => \"\(.entryName)\"," end' | sed "s/\"/'/g"
  SOURCE_APP_URL_MAP = {
    '/disability/view-dependents' => 'dependents-view-dependents',
    '/disability/view-disability-rating/rating' => 'disability-my-rated-disabilities',
    '/my-va' => 'dashboard',
    '/profile' => 'profile-360',
    '/account/connected-accounts' => 'connected-accounts',
    '/account' => 'account',
    '/health-care/my-health-account-validation' => 'my-health-account-validation',
    '/records/download-va-letters/letters' => 'letters',
    '/veteran-representative' => 'veteran-representative',
    '/health-care/apply/application' => 'hca',
    '/employment/vocational-rehab-and-employment/application/chapter36' => 'chapter36-vre',
    '/employment/vocational-rehab-and-employment/application/chapter31' => 'chapter31-vre',
    '/gi-bill-comparison-tool' => 'gi',
    '/yellow-ribbon/schools' => 'yellow-ribbon',
    '/verify' => 'verify',
    '/veteran-id-card/apply' => 'vic-v2',
    '/auth/login/callback' => 'auth',
    '/burials-and-memorials/pre-need/form-10007-apply-for-eligibility' => 'pre-need',
    '/disability-benefits/apply/form-0996-higher-level-review' => '0996-higher-level-review',
    '/disability-benefits/apply/dependents' => '686-dependent-status',
    '/disability-benefits/apply/form-526-disability-claim' => '526EZ-claims-increase',
    '/disability/file-disability-claim-form-21-526ez' => '526EZ-all-claims',
    '/education/apply-for-education-benefits/application/5495' => '5495-edu-benefits',
    '/education/apply-for-education-benefits/application/1995' => '1995-edu-benefits',
    '/education/apply-for-education-benefits/application/1990E' => '1990e-edu-benefits',
    '/education/opt-out-information-sharing/opt-out-form-0993' => '0993-edu-benefits',
    '/education/about-gi-bill-benefits/how-to-use-benefits/vettec-high-tech-program/apply-for-vettec-form-22-0994' => '0994-edu-benefits',
    '/education/apply-for-education-benefits/application/5490' => '5490-edu-benefits',
    '/education/submit-school-feedback' => 'feedback-tool',
    '/education/apply-for-education-benefits/application/1990' => '1990-edu-benefits',
    '/education/apply-for-education-benefits/application/1990N' => '1990n-edu-benefits',
    '/search' => 'search',
    '/education/gi-bill/post-9-11/ch-33-benefit' => 'post-911-gib-status',
    '/find-locations' => 'facilities',
    '/id-card-beta' => 'id-card-beta',
    '/health-care/medical-information-terms-conditions' => 'terms-and-conditions',
    '/records/get-veteran-id-cards/apply' => 'veteran-id-card',
    '/track-claims' => 'claims-status',
    '/pension/application/527EZ' => 'pensions',
    '/health-care/schedule-view-va-appointments/appointments' => 'vaos',
    '/discharge-upgrade-instructions' => 'discharge-upgrade-instructions',
    '/burials-and-memorials/application/530' => 'burials'
  }.freeze

  # Whitelist of vets-website app names. Contains the root URL map values and
  # the remaining app ids that do not have root URLs, which are generated by
  # running the following in vets-website:
  # find src/ -name 'manifest.js*' | xargs cat | jq -r 'if .rootUrl == null then entryName  else "" end'
  SOURCE_APP_NAMES = Set.new(
    SOURCE_APP_URL_MAP.values + %w[
      beta-enrollment,
      proxy-rewrite,
      static-pages,
      public-outreach-materials,
      undefined
    ]
  ).freeze

  def initialize(app)
    @app = app
  end

  def call(env)
    start_time = Time.current
    status, headers, response = @app.call(env)
    duration = (Time.current - start_time) * 1000.0

    path_parameters = env['action_dispatch.request.path_parameters']

    # When ActionDispatch middleware is not processed, as is the case when middleware
    # such as Rack::Attack halts the call chain while applying a rate limit, path
    # parameters are not parsed. In this case, we don't have a controller or action
    # for the request.
    #
    # We should never use a dynamic path to apply the tag for the instrumentation,
    # since this will permit a rogue actor to increase the number of time series
    # exported from the process and causes instability in the metrics system. Effort
    # should be taken to track known conditions carefully in alternate metrics. For
    # the case of Rack::Attack rate limits, we can track the number of 429s responses
    # based on component at the reverse proxy layer, or with instrumentation provided
    # by the Rack::Attack middleware (which performs some rudimentary path matching)

    if path_parameters
      controller = path_parameters[:controller]
      action = path_parameters[:action]
      source_app = get_source_app(env)

      instrument_statsd(status, duration, controller, action, source_app)
    end

    [status, headers, response]
  end

  private

  def get_source_app(env)
    source_app = env['HTTP_SOURCE_APP_NAME']

    if source_app.nil?
      referer = env['HTTP_REFERER']
      *, source_app = SOURCE_APP_URL_MAP.find do |root_url, app_name|
        URI.parse(referer).path.start_with? root_url
      end
    end

    return 'not_provided' if source_app.nil?
    return source_app if SOURCE_APP_NAMES.include?(source_app)

    # TODO: - Use sentry to notify us instead. It must be done in a rate-limited way
    #        so as not to allow for a malicious client to overflow worker queues
    Rails.logger.warn "Unrecognized value for HTTP_SOURCE_APP_NAME request header... [#{source_app}]"

    'not_in_whitelist'
  end

  def instrument_statsd(status, duration, controller, action, source_app)
    duration_tags = ["controller:#{controller}", "action:#{action}", "source_app:#{source_app}"]
    status_tags = duration_tags + ["status:#{status}"]

    # rubocop:disable Style/RescueModifier
    StatsD.increment(STATUS_KEY, tags: status_tags) rescue nil
    StatsD.measure(DURATION_KEY, duration, tags: duration_tags) rescue nil
    # rubocop:enable Style/RescueModifier
  end
end
